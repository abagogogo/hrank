# C++
using Graph=unordered_map<int, vector<int>>;

int bfs(Graph &g, vector<long> &ids, int src, int dst) {
    unordered_map<int, int> dist; // id -> distance from src.
    queue<int> q;

    dist[src] = 0;
    q.push(src);
    
    while (!q.empty()) {
        int curr = q.front(); q.pop();
        for (int next : g[curr]) {
            if (dist.find(next) != dist.end()) continue;
            dist[next] = dist[curr] + 1;
            q.push(next);
            if (ids[next - 1] == dst) return dist[next];
        }
    }
    return INT_MAX;
}

/*
 * For the unweighted graph, <name>:
 *
 * 1. The number of nodes is <name>_nodes.
 * 2. The number of edges is <name>_edges.
 * 3. An edge exists between <name>_from[i] to <name>_to[i].
 *
 */
int findShortest(int graph_nodes, vector<int> graph_from, vector<int> graph_to, vector<long> ids, int val) {
    Graph g;

    for (int i = 1; i <= graph_nodes; ++i) g[i] = {};
    for (int i = 0; i < graph_from.size(); ++i) {
        int from = graph_from[i];
        int to = graph_to[i];
        g[from].push_back(to);
        g[to].push_back(from);
    } 

    int min_dist = INT_MAX;
    for (auto it = g.begin(); it != g.end(); ++it) {
        int src = it->first;
        if (ids[src- 1] != val) continue;
        min_dist = min(min_dist, bfs(g, ids, src, val));
    }
    return min_dist == INT_MAX ? -1 : min_dist;
}

#!/bin/python3

from collections import defaultdict

class Graph:
    def __init__(self):
        self.nodes = set()
        self.edges = defaultdict(set)        
        
    def add_edge(self, src, dst):
        self.nodes.add(src)        
        self.nodes.add(dst)        
        if dst not in self.edges[src]:
            self.edges[src].add(dst)
            self.edges[dst].add(src)

    def bfs(self, src, val, ids):                        
        dist = {}
        dist[src] = 0
        q = [src]
                
        while q:            
            c = q.pop(0)            
            for n in self.edges[c]:
                if n in dist: continue
                dist[n] = dist[c] + 1
                q.append(n)                
                if ids[n - 1] == val: return dist[n]                
        return sys.maxsize
        
def findShortest(graph_nodes, graph_from, graph_to, ids, val):
    g = Graph()    
    for s, d in zip(graph_from, graph_to):        
        g.add_edge(s, d)

    min_dist = sys.maxsize
    for src in g.nodes:
        if ids[src - 1] != val: continue
        min_dist = min(min_dist, g.bfs(src, val, ids))     
           
    return -1 if min_dist == sys.maxsize else min_dist
        
