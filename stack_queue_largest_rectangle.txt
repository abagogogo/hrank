#!/bin/python3

def largestRectangle(h):
    s=[]
    max_area = 0
    h.append(0)
    s.append([h[0], 0])
    for i in range(1, len(h)):
        if h[i] >= h[i - 1]:
            s.append([h[i], i])
        else:
            left = i
            while s and s[-1][0] >= h[i]:
                left = s[-1][1]
                area = (i - left) * s[-1][0]
                max_area = max(area, max_area)
                s.pop()
            s.append([h[i], left])
    return max_area

// C++
long largestRectangle(vector<int> h) {
    stack<vector<int>> s; // stack of (hight, index)
    long max_area = 0;

    h.push_back(0); // Sentinel
    s.push({h[0], 0});
    for (int i = 1; i < h.size(); ++i) {
        if (h[i] >= h[i - 1]) {
            s.push({h[i], i});
        } else {
            int left = i;
            while (!s.empty() && s.top()[0] >= h[i]) {
                left = s.top()[1];
                long area = (i - left) * s.top()[0];
                max_area = max(area, max_area);
                s.pop();
            }
            s.push({h[i], left});
        }
    }
    return max_area;
}
