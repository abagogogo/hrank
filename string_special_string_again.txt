#!/bin/python3

def substrCount(n, s):
    l = []
    count = 0
    cur = None

    # 1st pass: construct a list of ('x', count) for consecutive 'x'
    for i in range(n):
        if s[i] == cur:
            count += 1
        else:
            if cur is not None:
                l.append((cur, count))
            cur = s[i]
            count = 1
    l.append((cur, count))

    ans = 0

    # 2nd pass: count consecutive same substring cases
    for i in l:
        ans += (i[1] * (i[1] + 1)) // 2

    # 3rd pass: count reflective substring cases
    for i in range(1, len(l) - 1):
        if l[i - 1][0] == l[i + 1][0] and l[i][1] == 1:
            ans += min(l[i - 1][1], l[i + 1][1])

    return ans

# C++
long substrCount(int n, string s) {
#if 0
    int cnt = n;

    int consec = 1;
    int mid = -1;
    for (int i = 1; i < n; ++i) {
        if (s[i] == s[i - 1]) {
            cnt += consec;
            ++consec;

            if (mid >= 0) {
                int refect = mid * 2 - i;
                if (refect >= 0 && s[refect] == s[i]) {
                    ++cnt;
                } else {
                    mid = -1;
                }
            }
        } else {
            consec = 1;

            if (i - 2 >= 0 && s[i - 2] == s[i]) {
                ++cnt;
                mid = i - 1;
            } else {
                mid = -1;
            }
        }
    }
    return cnt;
#else
    if (n == 0) return 0;

    long cnt = n;
    vector<char> uni_s;
    unordered_map<long, long> uni_cnt;

    uni_s.push_back(s[0]);
    uni_cnt[uni_s.size() - 1] = 1;
    for (int i = 1; i < n; ++i) {
        if (s[i] == s[i-1]) {
            cnt += uni_cnt[uni_s.size() - 1];
            uni_cnt[uni_s.size() - 1]++;
        } else {
            uni_s.push_back(s[i]);
            uni_cnt[uni_s.size() - 1] = 1;
        }
    }

    for (int i = 1; i < uni_s.size(); ++i) {
        if (uni_cnt[i] == 1 && i + 1 < uni_s.size()) {
            if (uni_s[i - 1] == uni_s[i + 1]) {
                cnt += min(uni_cnt[i-1], uni_cnt[i+1]);
            }
        }
    }
    return cnt;
#endif
}
